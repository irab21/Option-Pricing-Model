import numpy as np
from scipy.stats import norm
from scipy.optimize import minimize

# Black-Scholes Formula
def black_scholes(S, K, T, r, sigma, option_type="call"):
    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type == "call":
        price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    elif option_type == "put":
        price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    return price

# Greeks
def calculate_greeks(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    
    delta = norm.cdf(d1) if option_type == "call" else norm.cdf(d1) - 1
    gamma = norm.pdf(d1) / (S * sigma * np.sqrt(T))
    vega = S * norm.pdf(d1) * np.sqrt(T)
    theta = - (S * norm.pdf(d1) * sigma) / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)
    rho = K * T * np.exp(-r * T) * norm.cdf(d2) if option_type == "call" else -K * T * np.exp(-r * T) * norm.cdf(-d2)
    
    return {"Delta": delta, "Gamma": gamma, "Vega": vega, "Theta": theta, "Rho": rho}

# Implied Volatility
def implied_volatility(S, K, T, r, market_price, option_type="call"):
    def objective_function(sigma):
        return (black_scholes(S, K, T, r, sigma, option_type) - market_price)**2
    
    result = minimize(objective_function, x0=0.2, bounds=[(1e-5, 5)])
    return result.x[0]

# Example Usage
S = 100  # Current stock price
K = 110  # Strike price
T = 1    # Time to maturity (in years)
r = 0.05 # Risk-free rate
sigma = 0.2  # Volatility
option_type = "call"  # "put" for put option

# Calculate option price
price = black_scholes(S, K, T, r, sigma, option_type)
print(f"Option Price: {price:.2f}")

# Calculate Greeks
greeks = calculate_greeks(S, K, T, r, sigma)
print("Greeks:", greeks)

# Calculate Implied Volatility
market_price = 5  # Example market price of the option
iv = implied_volatility(S, K, T, r, market_price, option_type)
print(f"Implied Volatility: {iv:.2%}")
